<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pacman</name>
    </assembly>
    <members>
        <member name="T:Pacman.Collision">
            <summary>
            Class that handles collisions. Implements IGameObject.
            </summary>
        </member>
        <member name="P:Pacman.Collision.Name">
            <summary>
            Gets property for Name.
            </summary>
        </member>
        <member name="M:Pacman.Collision.#ctor(Pacman.MapComponent)">
            <summary>
            Constructor for Collision.
            </summary>
            <param name="map">Reference to map.</param>
        </member>
        <member name="M:Pacman.Collision.AddGameObject(Pacman.GameObject)">
            <summary>
            Adds GameObjects to a collection.
            </summary>
            <param name="gameObject">Gameobject to add.</param>
        </member>
        <member name="M:Pacman.Collision.RemoveGameObject(Pacman.GameObject)">
            <summary>
            Removes GameObjects from a collection.
            </summary>
            <param name="gameObject">GameObject to remove.</param>
        </member>
        <member name="M:Pacman.Collision.Start">
            <summary>
            Start method for Collision. Happens once on Start.
            </summary>
        </member>
        <member name="M:Pacman.Collision.Update">
            <summary>
            Update method for Collision
            Checks if pacman is colliding with anything.
            </summary>
        </member>
        <member name="M:Pacman.Collision.CollisionAction(Pacman.Cell,Pacman.GameObject)">
            <summary>
            Calls a certain event depending on the type of collision.
            </summary>
            <param name="collisionType">Type of collider pacman
            collided with.</param>
            <param name="collision">Gameobject of that collider.</param>
        </member>
        <member name="M:Pacman.Collision.OnGhostHouseExitCollision(Pacman.GameObject,Pacman.Cell)">
            <summary>
            Method that calls OnGhostHouseExitCollision event.
            </summary>
            <param name="gameObject">Ghost that collided.</param>
            <param name="cell">Ghost's Cell.</param>
        </member>
        <member name="M:Pacman.Collision.OnGhostCollision(Pacman.GameObject)">
            <summary>
            On Ghost collision event method.
            </summary>
            <param name="gameObject">Ghost that collided.</param>
        </member>
        <member name="M:Pacman.Collision.OnGhostHouseCollision(Pacman.GameObject)">
            <summary>
            On Ghost House Collision event method.
            </summary>
            <param name="gameObject">Ghost that collided.</param>
        </member>
        <member name="M:Pacman.Collision.OnScoreCollision(System.UInt16)">
            <summary>
            On Score collision event method.
            </summary>
            <param name="score">Score to add.</param>
        </member>
        <member name="M:Pacman.Collision.OnPowerPillCollision">
            <summary>
            On PowerPill collision event method.
            </summary>
        </member>
        <member name="M:Pacman.Collision.OnFoodCollision(Pacman.GameObject)">
            <summary>
            On Food collision event method.
            </summary>
            <param name="gameObject">Eaten food.</param>
        </member>
        <member name="M:Pacman.Collision.OnFoodCount">
            <summary>
            On Food Count event method. Happens when pacman eats a food.
            </summary>
        </member>
        <member name="E:Pacman.Collision.GhostCollision">
            <summary>
            GhostCollision event.
            </summary>
        </member>
        <member name="E:Pacman.Collision.GhostHouseCollision">
            <summary>
            GhostHouseCollision event happens when the ghost reaches the house.
            </summary>
        </member>
        <member name="E:Pacman.Collision.GhostHouseExitCollision">
            <summary>
            GhostHouseExitCollision happens when the ghost leaves the house.
            </summary>
        </member>
        <member name="E:Pacman.Collision.ScoreCollision">
            <summary>
            ScoreCollision happens when pacman eats something that increments
            score
            </summary>
        </member>
        <member name="E:Pacman.Collision.PowerPillCollision">
            <summary>
            PowerPillCollision happens when pacman eats a power pill
            </summary>
        </member>
        <member name="E:Pacman.Collision.FoodCollision">
            <summary>
            FoodCollision happens when pacman eats some kind of food
            (powerpills, food, or fruits)
            </summary>
        </member>
        <member name="E:Pacman.Collision.FoodCount">
            <summary>
            FoodCount happens when pacman eats a food
            </summary>
        </member>
        <member name="M:Pacman.Collision.Finish">
            <summary>
            Method that happens once on finish.
            </summary>
        </member>
        <member name="T:Pacman.ColliderComponent">
            <summary>
            Component for colliders. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.ColliderComponent.Type">
            <summary>
            Gets or sets type property.
            </summary>
        </member>
        <member name="M:Pacman.ColliderComponent.#ctor(Pacman.Cell)">
            <summary>
            Constructor for Collider Component.
            </summary>
            <param name="cell">Cell of this collider.</param>
        </member>
        <member name="T:Pacman.Component">
            <summary>
            Abstract class for every component. Implements IGameObject.
            </summary>
        </member>
        <member name="P:Pacman.Component.Name">
            <summary>
            Gets name for property.
            </summary>
        </member>
        <member name="P:Pacman.Component.ParentGameObject">
            <summary>
            Gets or sets parent game object property.
            </summary>
        </member>
        <member name="M:Pacman.Component.Start">
            <summary>
            Method that runs once on start.
            </summary>
        </member>
        <member name="M:Pacman.Component.Update">
            <summary>
            Method responsible for what happens when the GameObject is running.
            </summary>
        </member>
        <member name="M:Pacman.Component.Finish">
            <summary>
            Method that runs once on finish.
            </summary>
        </member>
        <member name="T:Pacman.Components.CreateNewLevelComponent">
            <summary>
            Class responsible for creating a new level. Extends Component.
            </summary>
        </member>
        <member name="M:Pacman.Components.CreateNewLevelComponent.#ctor(Pacman.KeyReaderComponent,Pacman.GameRelated.SceneHandler)">
            <summary>
            Constructor for CreateNewLevelComponent.
            </summary>
            <param name="keyReader">Reference to keyreader.</param>
            <param name="sceneHandler">Reference to scene handler.</param>
        </member>
        <member name="M:Pacman.Components.CreateNewLevelComponent.Start">
            <summary>
            Method that runs once on start.
            Creates a new level and adds it to scene handler.
            </summary>
        </member>
        <member name="T:Pacman.Components.HighScoreComponent">
            <summary>
            Class responsible for updating the high score. Extends ecomponent.
            </summary>
        </member>
        <member name="P:Pacman.Components.HighScoreComponent.HighScore">
            <summary>
            Gets highScore.
            </summary>
        </member>
        <member name="M:Pacman.Components.HighScoreComponent.Start">
            <summary>
            Method thatr runs once on start.
            Reads a file with high score. If the file doesn't exist,
            the high score is 0.
            </summary>
        </member>
        <member name="T:Pacman.Components.MapTransformComponent">
            <summary>
            Class responsible for map transforms. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.Components.MapTransformComponent.Position">
            <summary>
            Gets or sets position.
            </summary>
        </member>
        <member name="P:Pacman.Components.MapTransformComponent.Direction">
            <summary>
            Gets or sets direction.
            </summary>
        </member>
        <member name="M:Pacman.Components.MapTransformComponent.#ctor(System.Int32,System.Int32,Pacman.Direction)">
            <summary>
            Constructor for MapTransformComponent.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y Position.</param>
            <param name="direction">Current direction.</param>
        </member>
        <member name="T:Pacman.Components.SceneChangerComponent">
            <summary>
            Class responsible for changing scenes. Extends component.
            </summary>
        </member>
        <member name="P:Pacman.Components.SceneChangerComponent.SceneHandler">
            <summary>
            Gets or sets sceneHandler.
            </summary>
        </member>
        <member name="P:Pacman.Components.SceneChangerComponent.SceneToLoad">
            <summary>
            Gets or sets sceneToLoad.
            </summary>
        </member>
        <member name="M:Pacman.Components.SceneChangerComponent.#ctor(Pacman.GameRelated.SceneHandler)">
            <summary>
            Constructor for SceneChangerComponent.
            </summary>
            <param name="sceneHandler">Reference to sceneHandler.</param>
        </member>
        <member name="M:Pacman.Components.SceneChangerComponent.ChangeScene">
            <summary>
            Method responsible for changing scenes.
            </summary>
        </member>
        <member name="T:Pacman.FruitSpawnerComponent">
            <summary>
            Class responsible for spawning fruits. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.FruitSpawnerComponent.FruitTimer">
            <summary>
            Gets fruit Timer.
            </summary>
        </member>
        <member name="P:Pacman.FruitSpawnerComponent.FruitName">
            <summary>
            Gets or sets fruitName.
            </summary>
        </member>
        <member name="P:Pacman.FruitSpawnerComponent.FruitSlot">
            <summary>
            Gets or sets fruitSlot.
            </summary>
        </member>
        <member name="M:Pacman.FruitSpawnerComponent.#ctor(System.UInt32)">
            <summary>
            Constructor for FruitSpawnerComponent.
            </summary>
            <param name="fruitSpawnTime">Time to spawn each fruit.</param>
        </member>
        <member name="M:Pacman.FruitSpawnerComponent.Start">
            <summary>
            Method that happens once on start.
            </summary>
        </member>
        <member name="M:Pacman.FruitSpawnerComponent.Finish">
            <summary>
            Method that happens once on finish.
            </summary>
        </member>
        <member name="M:Pacman.FruitSpawnerComponent.OnRegisterToTimerEvent">
            <summary>
            Method that invokes RegisterToTimerEvent event.
            </summary>
        </member>
        <member name="E:Pacman.FruitSpawnerComponent.RegisterToTimerEvent">
            <summary>
            RegisterToTimerEvent is used on a class that wants to register
            to this event
            </summary>
        </member>
        <member name="T:Pacman.GameOverCheckComponent">
            <summary>
            Class that confirms if the game is over. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.GameOverCheckComponent.FoodsEaten">
            <summary>
            Gets foosEatenCount.
            </summary>
        </member>
        <member name="M:Pacman.GameOverCheckComponent.#ctor(System.UInt16,Pacman.Collision)">
            <summary>
            Constructor for GameOverCheckComponent.
            </summary>
            <param name="numberOfFoodsToCheck">Number of foods to check.</param>
            <param name="collision">Collisions component.</param>
        </member>
        <member name="M:Pacman.GameOverCheckComponent.Start">
            <summary>
            Method that runs once on start.
            </summary>
        </member>
        <member name="M:Pacman.GameOverCheckComponent.Finish">
            <summary>
            Method that runs once on finish.
            </summary>
        </member>
        <member name="M:Pacman.GameOverCheckComponent.CheckAllFoods">
            <summary>
            Checks if foodseaten number is the same as the array length.
            </summary>
        </member>
        <member name="M:Pacman.GameOverCheckComponent.OnNoFoodsLeft">
            <summary>
            Method that invokes NoFoodsLeft event.
            </summary>
        </member>
        <member name="E:Pacman.GameOverCheckComponent.NoFoodsLeft">
            <summary>
            NoFoodsLeft happens where there aren't any foods left.
            </summary>
        </member>
        <member name="T:Pacman.KeyReaderComponent">
            <summary>
            Component responsible for reading keys from the terminal.
            </summary>
        </member>
        <member name="P:Pacman.KeyReaderComponent.Direction">
            <summary>
            Gets direction to which the pressed key corresponds.
            </summary>
        </member>
        <member name="E:Pacman.KeyReaderComponent.EscapePressed">
            <summary>
            Event that is fired when the Esc key is pressed
            </summary>
        </member>
        <member name="P:Pacman.KeyReaderComponent.QuitKeys">
            <summary>
            Gets or sets quitKeys collection.
            </summary>
        </member>
        <member name="M:Pacman.KeyReaderComponent.#ctor(System.ConsoleKey)">
            <summary>
            Constructor for KeyReaderComponent.
            </summary>
            <param name="quitKey">Key needed to quit the game.</param>
        </member>
        <member name="M:Pacman.KeyReaderComponent.#ctor(System.Collections.Generic.ICollection{System.ConsoleKey})">
            <summary>
            Constructor for KeyReaderComponent.
            </summary>
            <param name="quitKeys">Collection with console key.</param>
        </member>
        <member name="M:Pacman.KeyReaderComponent.Start">
            <summary>
            Method that runs once on start.
            </summary>
        </member>
        <member name="M:Pacman.KeyReaderComponent.Update">
            <summary>
            Method responsible for what happens when
            KeyReaderComponent is running.
            </summary>
        </member>
        <member name="M:Pacman.KeyReaderComponent.Finish">
            <summary>
            Method that runs once on finish.
            </summary>
        </member>
        <member name="M:Pacman.KeyReaderComponent.ReadKeys">
            <summary>
            Reads the keys from the terminal.
            </summary>
        </member>
        <member name="M:Pacman.KeyReaderComponent.OnEscapePressed">
            <summary>
            Invokes the EscapePressed event.
            </summary>
        </member>
        <member name="M:Pacman.KeyReaderComponent.OnEnterPressed">
            <summary>
            Invokes the EnterPressed event.
            </summary>
        </member>
        <member name="E:Pacman.KeyReaderComponent.EnterPressed">
            <summary>
            EnterPressed happens when enter is pressed.
            </summary>
        </member>
        <member name="E:Pacman.KeyReaderComponent.SpaceBarPressed">
            <summary>
            SpaceBarPressed happens when space bar is pressed.
            </summary>
        </member>
        <member name="T:Pacman.LivesComponent">
            <summary>
            Class for lives component. Extends Component
            </summary>
        </member>
        <member name="P:Pacman.LivesComponent.Lives">
            <summary>
            Gets or sets lives.
            </summary>
        </member>
        <member name="M:Pacman.LivesComponent.#ctor(System.Byte)">
            <summary>
            Constructor for lives component.
            </summary>
            <param name="lives">Lives to add.</param>
        </member>
        <member name="T:Pacman.MapComponent">
            <summary>
            Map Component. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.MapComponent.Map">
            <summary>
            Gets or sets MapStructs to create a map.
            </summary>
        </member>
        <member name="M:Pacman.MapComponent.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructor for MapComponent.
            </summary>
            <param name="xDim">X size.</param>
            <param name="yDim">Y size.</param>
        </member>
        <member name="M:Pacman.MapComponent.CreatePacmanMap">
            <summary>
            Creates map for pacman.
            </summary>
        </member>
        <member name="T:Pacman.MoveComponent">
            <summary>
            Movement Component. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.MoveComponent.MovementState">
            <summary>
            Gets or sets movementState.
            </summary>
        </member>
        <member name="M:Pacman.MoveComponent.#ctor">
            <summary>
            Constructor for MoveComponent.
            </summary>
        </member>
        <member name="M:Pacman.MoveComponent.Start">
            <summary>
            Method that runs once on start.
            </summary>
        </member>
        <member name="M:Pacman.MoveComponent.AddMovementBehaviour(Pacman.IMovementBehaviour)">
            <summary>
            Adds current movement to this class.
            </summary>
            <param name="movementBehaviour">Movement Behaviour to add</param>
        </member>
        <member name="M:Pacman.MoveComponent.Update">
            <summary>
            Method responsible for what happens when the GameObject is running.
            Runs movement behavior movement method.
            </summary>
        </member>
        <member name="T:Pacman.RenderableComponent">
            <summary>
            Class for every renderable component. Extends Component.
            </summary>
        </member>
        <member name="P:Pacman.RenderableComponent.Pixels">
            <summary>
            Gets pixels.
            </summary>
        </member>
        <member name="T:Pacman.TransformComponent">
            <summary>
            Transform component. Extends component
            </summary>
        </member>
        <member name="P:Pacman.TransformComponent.Position">
            <summary>
            Property for position
            </summary>
        </member>
        <member name="M:Pacman.TransformComponent.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for TransformComponent
            </summary>
            <param name="cell">Type of cell</param>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
        </member>
        <member name="M:Pacman.TransformComponent.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="T:Pacman.ConsolePixel">
            <summary>
            Represents a console pixel
            </summary>
        </member>
        <member name="P:Pacman.ConsolePixel.IsRenderable">
            <summary>
            Defines whether the ConsolePixel is renderable
            </summary>
        </member>
        <member name="T:Pacman.ConsoleRenderer">
            <summary>
            Responsible for realizing the render of the scene and its objects.
            </summary>
        </member>
        <member name="P:Pacman.ConsoleRenderer.Name">
            <summary>
            ConsoleRenderer name
            </summary>
        </member>
        <member name="M:Pacman.ConsoleRenderer.#ctor(System.Int32,System.Int32,Pacman.ConsolePixel,Pacman.Collision,System.String)">
            <summary>
            Constructor, that creates a new instance of ConsoleRenderer and
            initializes its members. Constructor for game
            </summary>
            <param name="xdim">Horizontal dimension of the scene.</param>
            <param name="ydim">Vertical dimension of the scene.</param>
            <param name="bgPix">Default ConsolePixel for the background.</param>
            <param name="collision">Reference to a collision class.</param>
            <param name="name">Name of the ConsoleRenderer object.</param>
        </member>
        <member name="M:Pacman.ConsoleRenderer.#ctor(System.Int32,System.Int32,Pacman.ConsolePixel,System.String)">
            <summary>
            Constructor, that creates a new instance of ConsoleRenderer and
            initializes its members. Constructor for menu
            </summary>
            <param name="xdim">Horizontal dimension of the scene.</param>
            <param name="ydim">Vertical dimension of the scene.</param>
            <param name="bgPix">Default ConsolePixel for the background.</param>
            <param name="name">Name of the ConsoleRenderer object.</param>
        </member>
        <member name="M:Pacman.ConsoleRenderer.Start">
            <summary>
            Runs once at the start and realizes a pre-rendering setup
            </summary>
        </member>
        <member name="M:Pacman.ConsoleRenderer.Finish">
            <summary>
            Runs once at the finish and tears down the rendering.
            </summary>
        </member>
        <member name="M:Pacman.ConsoleRenderer.Update">
            <summary>
            Realizes the rendering on each update.
            </summary>
        </member>
        <member name="M:Pacman.ConsoleRenderer.RenderFrame">
            <summary>
            Renders the actual frame.
            </summary>
        </member>
        <member name="M:Pacman.ConsoleRenderer.AddGameObject(Pacman.GameObject)">
            <summary>
            Adds an object to be rendered.
            </summary>
            <param name="gameObject">Object to be rendered.</param>
        </member>
        <member name="M:Pacman.ConsoleRenderer.RemoveGameObject(Pacman.GameObject)">
            <summary>
            Removes an object from being rendered.
            </summary>
            <param name="gameObject">Object to remove</param>
        </member>
        <member name="T:Pacman.Cell">
            <summary>
            Enum with cell types
            </summary>
        </member>
        <member name="T:Pacman.Direction">
            <summary>
            Enum for possible directions
            </summary>
        </member>
        <member name="T:Pacman.MovementState">
            <summary>
            Enum with possible movement states
            </summary>
        </member>
        <member name="T:Pacman.FileReader">
            <summary>
            Class for FileReader. Reads files
            </summary>
        </member>
        <member name="M:Pacman.FileReader.#ctor(System.String)">
            <summary>
            Constructor for FileReader
            </summary>
            <param name="path">Receives a string to read the file from</param>
        </member>
        <member name="M:Pacman.FileReader.ReadHighScore">
            <summary>
            Reads lives from highscore txt file
            </summary>
            <returns>Returns an uint with highscore</returns>
        </member>
        <member name="T:Pacman.FileWriter">
            <summary>
            Class for FileWriter. Writes files
            </summary>
        </member>
        <member name="M:Pacman.FileWriter.#ctor(System.String)">
            <summary>
            Constructor for FileWriter
            </summary>
            <param name="path">Path to write to</param>
        </member>
        <member name="M:Pacman.FileWriter.CreateHighScoreTXT(System.UInt32)">
            <summary>
            Creates a text file with pacman highscore
            </summary>
            <param name="highscore"></param>
        </member>
        <member name="T:Pacman.Path">
            <summary>
            Struct with file paths
            </summary>
        </member>
        <member name="T:Pacman.GameObject">
            <summary>
            Class for every GameObject. Implements IGameObject interface
            </summary>
        </member>
        <member name="P:Pacman.GameObject.Name">
            <summary>
            Property for GameObject's name
            </summary>
        </member>
        <member name="M:Pacman.GameObject.#ctor(System.String)">
            <summary>
            Constructor for GameObject
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Pacman.GameObject.AddComponent(Pacman.Component)">
            <summary>
            Adds a component to the components collection in this GameObject
            </summary>
            <param name="component">Component to add</param>
        </member>
        <member name="M:Pacman.GameObject.GetComponent``1">
            <summary>
            Gets a certain component from every component attached to 
            this GameObject
            </summary>
            <typeparam name="T">Component to get</typeparam>
            <returns></returns>
        </member>
        <member name="M:Pacman.GameObject.Start">
            <summary>
            Method that runs once on start
            </summary>
        </member>
        <member name="M:Pacman.GameObject.Update">
            <summary>
            Method responsible for what happens when the GameObject is running
            </summary>
        </member>
        <member name="M:Pacman.GameObject.Finish">
            <summary>
            Method that runs once on finish
            </summary>
        </member>
        <member name="M:Pacman.GameObject.ToString">
            <summary>
            Overrides ToString to print this object's name
            </summary>
            <returns>Returns a string with the object Name</returns>
        </member>
        <member name="T:Pacman.GameState">
            <summary>
            Class with game state information
            </summary>
        </member>
        <member name="M:Pacman.GameState.GhostCollision(Pacman.GameObject)">
            <summary>
            Happens once when there's a collision with a ghost
            </summary>
        </member>
        <member name="M:Pacman.GameState.OnGhostChaseCollision">
            <summary>
            On Ghost Chase collision method. Calls GhostChaseCollision event
            </summary>
        </member>
        <member name="T:Pacman.LevelCreation">
            <summary>
            Class responsible for creating pacman level
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.#ctor(Pacman.KeyReaderComponent,Pacman.GameRelated.SceneHandler,System.Random)">
            <summary>
            Constructor for LevelCreation
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.GenerateScene">
            <summary>
            Method responsible for creating pacman level
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.GameOverCheckCreation">
            <summary>
            Creates GameOverCheck. Used to check if there are foods left
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.GameOver">
            <summary>
            Happens when the game is over
            Writes high score and terminates current scene
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.ResetPositions">
            <summary>
            Resets pacman position
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.PacmanCreation(Pacman.MapComponent)">
            <summary>
            Creates pacman
            </summary>
            <param name="map">Map reference to the game map</param>
        </member>
        <member name="M:Pacman.LevelCreation.GhostCreation(Pacman.MapComponent)">
            <summary>
            Creates ghosts
            </summary>
            <param name="map">Map reference to the game map</param>
        </member>
        <member name="M:Pacman.LevelCreation.FoodCreation">
            <summary>
            Creates foods
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.FruitSpawnerCreation">
            <summary>
            Creates fruit spawner and adds fruit spawner component
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.FruitCreation(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Creates a fruit in a random position
            This method is called with a timed event created on
            FruitSpawnerComponent script
            </summary>
            <param name="source">Source</param>
            <param name="e">Elapsed event arguments</param>
        </member>
        <member name="M:Pacman.LevelCreation.PowerPillsCreation">
            <summary>
            Creates power pills
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.WallCreation(Pacman.MapComponent)">
            <summary>
            Creates walls
            </summary>
            <param name="map">Map reference to the game map</param>
        </member>
        <member name="M:Pacman.LevelCreation.UICreation">
            <summary>
            Creates score related variables
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.AddGameObjectsToCollisionCheck">
            <summary>
            Adds gameobjects to collision check
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.AddGameObjectsToScene">
            <summary>
            Adds gameobjects to LevelScene
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.AddGameObjectsToRender">
            <summary>
            Adds gameobjects to render
            </summary>
        </member>
        <member name="M:Pacman.LevelCreation.Finalize">
            <summary>
            Destructor for LevelCreation
            Unsubscribes from events
            </summary>
        </member>
        <member name="M:Pacman.MenuCreation.CreatePacmanSprite(System.Collections.Generic.ICollection{Pacman.Vector2Int[]})">
            <summary>
            Creates pacman sprite
            </summary>
            <param name="testList"></param>
        </member>
        <member name="M:Pacman.MenuCreation.AddGameObjectsToScene">
            <summary>
            Adds game objects to MenuScene
            </summary>
        </member>
        <member name="M:Pacman.MenuCreation.AddGameObjectsToRenderer">
            <summary>
            Adds game objects to renderer
            </summary>
        </member>
        <member name="T:Pacman.Scene">
            <summary>
            Represents a game scene
            </summary>
        </member>
        <member name="M:Pacman.Scene.#ctor">
            <summary>
            Constructor for scene inGame
            </summary>
            <param name="xdim">X dimensions</param>
            <param name="ydim">Y dimensions</param>
            <param name="gameState">Reference to a GameState class</param>
            <param name="collision">Reference to a Collision class</param>
            <param name="keyReader">Reference to a keyreader class</param>
        </member>
        <member name="M:Pacman.Scene.AddGameObject(Pacman.IGameObject)">
            <summary>
            Adds a GameObject to the scene.
            </summary>
            <param name="gameObject">GameObject to be added.</param>
        </member>
        <member name="M:Pacman.Scene.RemoveGameObject(Pacman.IGameObject)">
            <summary>
            Removes a GameObject from the scene
            </summary>
            <param name="gameObject">Object to remove</param>
        </member>
        <member name="M:Pacman.Scene.FindGameObjectByName(System.String)">
            <summary>
            Finds a GameObject with a given name.
            </summary>
            <param name="name">Name of the GameObject.</param>
            <returns>Returns the GameObject that was found.</returns>
        </member>
        <member name="M:Pacman.Scene.GameLoop(System.Int32)">
            <summary>
            Method responsible for the main gameLoop
            </summary>
            <param name="msFramesPerSecond">Miliseconds to wait</param>
        </member>
        <member name="T:Pacman.Score">
            <summary>
            Class for ConsoleScore. Implements IGameObject
            </summary>
        </member>
        <member name="P:Pacman.Score.Name">
            <summary>
            Property with this class's name
            </summary>
        </member>
        <member name="P:Pacman.Score.GetScore">
            <summary>
            Property that returns a string with current score
            </summary>
        </member>
        <member name="M:Pacman.Score.#ctor(Pacman.Collision)">
            <summary>
            Constructor for Score
            </summary>
            <param name="collision">Collision parameter</param>
        </member>
        <member name="M:Pacman.Score.Start">
            <summary>
            Method that runs once on start
            </summary>
        </member>
        <member name="M:Pacman.Score.Finish">
            <summary>
            Method that runs once on finish
            </summary>
        </member>
        <member name="M:Pacman.Score.UpdateScore(System.UInt16)">
            <summary>
            Updates score everytime pacman eats a food
            </summary>
            <param name="score"></param>
        </member>
        <member name="T:Pacman.IGameObject">
            <summary>
            Interface for every GameObject
            </summary>
        </member>
        <member name="P:Pacman.IGameObject.Name">
            <summary>
            Property for IGameObject name
            </summary>
        </member>
        <member name="M:Pacman.IGameObject.Start">
            <summary>
            Method that runs once on start
            </summary>
        </member>
        <member name="M:Pacman.IGameObject.Update">
            <summary>
            Method responsible for what happens when the GameObject is running
            </summary>
        </member>
        <member name="M:Pacman.IGameObject.Finish">
            <summary>
            Method that runs once on finish
            </summary>
        </member>
        <member name="T:Pacman.IMovementBehaviour">
            <summary>
            Interface for Movement
            </summary>
        </member>
        <member name="M:Pacman.IMovementBehaviour.Movement(System.Int32,System.Int32)">
            <summary>
            Movement Behaviour
            </summary>
            <param name="maxX">X map size</param>
            <param name="maxY">Y map size</param>
        </member>
        <member name="T:Pacman.PacmanMovementBehaviour">
            <summary>
            Class for pacman movement. Implements IMovementBehaviour
            </summary>
        </member>
        <member name="M:Pacman.PacmanMovementBehaviour.#ctor(Pacman.GameObject,Pacman.Components.MapTransformComponent,System.Int32)">
            <summary>
            Gets components from pacman gameobject
            </summary>
            <param name="pacman">Object to get components from</param>
        </member>
        <member name="M:Pacman.PacmanMovementBehaviour.#ctor(Pacman.GameObject,Pacman.MoveComponent)">
            <summary>
            Gets components from pacman gameobject
            </summary>
            <param name="pacman">Object to get components from</param>
            <param name="moveComponent">Move component to add
            this behaviour to</param>
        </member>
        <member name="M:Pacman.PacmanMovementBehaviour.Movement(System.Int32,System.Int32)">
            <summary>
            Movement method for pacman
            </summary>
            <param name="xMax">X map size</param>
            <param name="yMax">Y map size</param>
        </member>
        <member name="M:Pacman.PinkyMovementBehaviour.#ctor(Pacman.GameObject)">
            <summary>
            Gets components from pacman gameobject
            </summary>
            <param name="pinky">Object to get components from</param>
        </member>
        <member name="M:Pacman.PinkyMovementBehaviour.#ctor(Pacman.GameObject,Pacman.MoveComponent)">
            <summary>
            Gets components from pacman gameobject
            </summary>
            <param name="pinky">Object to get components from</param>
            <param name="moveComponent">Move component to add
            this behaviour to</param>
        </member>
        <member name="M:Pacman.SelectorMovementBehaviour.Movement(System.Int32,System.Int32)">
            <summary>
            Movement method for pacman
            </summary>
            <param name="xMax">X map size</param>
            <param name="yMax">Y map size</param>
        </member>
        <member name="T:Pacman.RenderableStringComponent">
            <summary>
            Class for renderable strings component. Extendes renderable component.
            </summary>
        </member>
        <member name="M:Pacman.RenderableStringComponent.#ctor(System.Func{System.String},System.Func{System.Int32,Pacman.Vector2Int},System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Constructor for RenderableStringComponent
            </summary>
            <param name="getStr">Delegeate with the string to be rendered</param>
            <param name="getPos">Delegate with position for every character
            in the string</param>
            <param name="fgColor">Foreground Color</param>
            <param name="bgColor">Background Color</param>
        </member>
        <member name="T:Pacman.Vector2Int">
            <summary>
            Struct for Vector2Int
            </summary>
        </member>
        <member name="P:Pacman.Vector2Int.X">
            <summary>
            Property for X value
            </summary>
        </member>
        <member name="P:Pacman.Vector2Int.Y">
            <summary>
            Property for Y value
            </summary>
        </member>
        <member name="M:Pacman.Vector2Int.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for Vector2Int
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
        </member>
    </members>
</doc>
